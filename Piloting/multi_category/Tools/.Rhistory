names(results) = c("design_matrix", "event_file", "efficiency", "VIF", "all_correlations", "mean_correlation")
return(results)
}
curr_design <- test_localizer_design(df=localizer,
stimulus.duration=stimulus.duration,
iti.duration=iti.duration,
timing.baseline.block=timing.baseline.block,
event.column="task",
TR=1.5)
df$stimulus_duration = stimulus.duration
itis <- sort(unique(df$iti))
df$iti[df$iti == isis[1]] = iti.duration
df$iti[df$iti == isis[2]] = timing.baseline.block
# create an even file
onset = 0;
event.file = data.frame()
for (i in 1:nrow(df)){
iti = df$iti[i]
duration = df$stimulus_duration[i];
event = as.character(df[i,event.column])
event.file = rbind(event.file, data.frame(event=event, onset=onset, duration=duration, iti=iti));
onset = onset + duration + iti;
}
# compute design matrix
events <- unique(unlist(df[,event.column]))
onsets <- list(); durations <- list(); totaltime <- list();  effectsize <- list()
for (e in 1:length(events)){
onsets[[e]] <- as.numeric(unlist(event.file %>% subset(event == events[e]) %>% select(onset)))/1000
durations[[e]] <- as.numeric(unlist(event.file %>% subset(event == events[e]) %>% select(duration)))/1000
totaltime[[e]] <- closest_divider(round((nrow(df) * stimulus.duration + sum(df$iti))/1000),TR)
effectsize[[e]] <- 1
}
design = specifydesign(onsets=onsets, durations=durations, totaltime=totaltime[[1]], TR=TR, effectsize=effectsize, conv="double-gamma", cond.names = events)
des.mat = cbind(rep(1, nrow(design)), design)
contrast1 <- c(0,1,-0.33,-0.33,-0.33)
contrast2 <- c(0,-0.33,1,-0.33,-0.33)
contrast3 <- c(0,-0.33,-0.33,1,-0.33)
contrast4 <- c(0,-0.33,-0.33,-0.33,1)
efficiency = 4/((t(contrast1)%*%solve(t(des.mat)%*%des.mat)%*%contrast1) +
(t(contrast2)%*%solve(t(des.mat)%*%des.mat)%*%contrast2) +
(t(contrast3)%*%solve(t(des.mat)%*%des.mat)%*%contrast3) +
(t(contrast4)%*%solve(t(des.mat)%*%des.mat)%*%contrast4))
VIF = diag(solve(cor(des.mat[,2:5])))
# compute pair-wise correlations
pairs_categories = as.data.frame(t(combn(categories,2)))
all_corrs = c()
for (p in 1:nrow(pairs_categories)){
all_corrs[p] <- as.numeric(cor.test(des.mat[,pairs_categories$V1[p]], des.mat[,pairs_categories$V2[p]])$estimate)
}
all_correlations <- all_corrs
mean_corr <- mean(all_corrs)
# add TR to event file
event.file = event.file %>% mutate(TR = onset/1000/TR)
results = list(des.mat, event.file, VIF, all_correlations, mean_corr)
names(results) = c("design_matrix", "event_file", "VIF", "all_correlations", "mean_correlation")
test_localizer_design <- function(df, stimulus.duration, iti.duration, timing.baseline.block, event.column, TR){
df$stimulus_duration = stimulus.duration
itis <- sort(unique(df$iti))
df$iti[df$iti == isis[1]] = iti.duration
df$iti[df$iti == isis[2]] = timing.baseline.block
# create an even file
onset = 0;
event.file = data.frame()
for (i in 1:nrow(df)){
iti = df$iti[i]
duration = df$stimulus_duration[i];
event = as.character(df[i,event.column])
event.file = rbind(event.file, data.frame(event=event, onset=onset, duration=duration, iti=iti));
onset = onset + duration + iti;
}
# compute design matrix
events <- unique(unlist(df[,event.column]))
onsets <- list(); durations <- list(); totaltime <- list();  effectsize <- list()
for (e in 1:length(events)){
onsets[[e]] <- as.numeric(unlist(event.file %>% subset(event == events[e]) %>% select(onset)))/1000
durations[[e]] <- as.numeric(unlist(event.file %>% subset(event == events[e]) %>% select(duration)))/1000
totaltime[[e]] <- closest_divider(round((nrow(df) * stimulus.duration + sum(df$iti))/1000),TR)
effectsize[[e]] <- 1
}
design = specifydesign(onsets=onsets, durations=durations, totaltime=totaltime[[1]], TR=TR, effectsize=effectsize, conv="double-gamma", cond.names = events)
des.mat = cbind(rep(1, nrow(design)), design)
contrast1 <- c(0,1,-0.33,-0.33,-0.33)
contrast2 <- c(0,-0.33,1,-0.33,-0.33)
contrast3 <- c(0,-0.33,-0.33,1,-0.33)
contrast4 <- c(0,-0.33,-0.33,-0.33,1)
# efficiency = 4/((t(contrast1)%*%solve(t(des.mat)%*%des.mat)%*%contrast1) +
#                 (t(contrast2)%*%solve(t(des.mat)%*%des.mat)%*%contrast2) +
#                 (t(contrast3)%*%solve(t(des.mat)%*%des.mat)%*%contrast3) +
#                 (t(contrast4)%*%solve(t(des.mat)%*%des.mat)%*%contrast4))
## Variance Inflation Factor (rule of thumb - should be below 5)
VIF = diag(solve(cor(des.mat[,2:5])))
# compute pair-wise correlations
pairs_categories = as.data.frame(t(combn(categories,2)))
all_corrs = c()
for (p in 1:nrow(pairs_categories)){
all_corrs[p] <- as.numeric(cor.test(des.mat[,pairs_categories$V1[p]], des.mat[,pairs_categories$V2[p]])$estimate)
}
all_correlations <- all_corrs
mean_corr <- mean(all_corrs)
# add TR to event file
event.file = event.file %>% mutate(TR = onset/1000/TR)
results = list(des.mat, event.file, VIF, all_correlations, mean_corr)
names(results) = c("design_matrix", "event_file", "VIF", "all_correlations", "mean_correlation")
return(results)
}
curr_design <- test_localizer_design(df=localizer,
stimulus.duration=stimulus.duration,
iti.duration=iti.duration,
timing.baseline.block=timing.baseline.block,
event.column="task",
TR=1.5)
curr_design$mean_correlation
curr_design$efficiency
curr_design$VIF
events = unique(unlist(localizer["task"]))
dev.new(width=15, height=5, unit="in")
plot(curr_design$design_matrix[,events[1]], type = 'l', lwd = 2, col = 'red', xlab = "TR",
ylab = '', ylim = c(min(c(curr_design$design_matrix[,events])), 1.3))
lines(curr_design$design_matrix[,events[2]], lwd = 2, col = 'green')
lines(curr_design$design_matrix[,events[3]], lwd = 2, col = 'blue')
lines(curr_design$design_matrix[,events[4]], lwd = 2, col = 'grey')
abline(v=curr_design$event_file[curr_design$event_file$event==events[1],"TR"], lwd = 0.2, col = 'red', lty=1)
abline(v=curr_design$event_file[curr_design$event_file$event==events[2],"TR"], lwd = 0.2, col = 'green', lty=1)
abline(v=curr_design$event_file[curr_design$event_file$event==events[3],"TR"], lwd = 0.2, col = 'blue', lty=1)
abline(v=curr_design$event_file[curr_design$event_file$event==events[4],"TR"], lwd = 0.2, col = 'grey', lty=1)
View(localizer)
localizer <- read.csv("../Task_sequences/Localizer/localizer_1.csv")
categories = c("outdoor_scenes", "objects", "faces", "body_parts")
stimulus.duration = 400;
iti.duration = 300;
n.stims.per.block = 20;
timing.baseline.block = n.stims.per.block * (stimulus.duration+iti.duration) # 14 secs
n.reps.per.category = 3;
total.exp.time = length(categories)*2*timing.baseline.block*n.reps.per.category/60000
n.stims.per.cat = n.stims.per.block*n.reps.per.category;
odd.ball.percent = 0.1
event.column = "task"
TR = 1.5
df=[]
df=c()
localizer <- read.csv("../Task_sequences/Localizer/localizer_1.csv")
categories = c("outdoor_scenes", "objects", "faces", "body_parts")
stimulus.duration = 400;
iti.duration = 300;
n.stims.per.block = 20;
timing.baseline.block = n.stims.per.block * (stimulus.duration+iti.duration) # 14 secs
n.reps.per.category = 3;
total.exp.time = length(categories)*2*timing.baseline.block*n.reps.per.category/60000
n.stims.per.cat = n.stims.per.block*n.reps.per.category;
odd.ball.percent = 0.1
event.column = "task"
TR = 1.5
test_localizer_design <- function(df, stimulus.duration, iti.duration, timing.baseline.block, event.column, TR){
df$stimulus_duration = stimulus.duration
itis <- sort(unique(df$iti))
df$iti[df$iti == isis[1]] = iti.duration
df$iti[df$iti == isis[2]] = timing.baseline.block
# create an even file
onset = 0;
event.file = data.frame()
for (i in 1:nrow(df)){
iti = df$iti[i]
duration = df$stimulus_duration[i];
event = as.character(df[i,event.column])
event.file = rbind(event.file, data.frame(event=event, onset=onset, duration=duration, iti=iti));
onset = onset + duration + iti;
}
# compute design matrix
events <- unique(unlist(df[,event.column]))
onsets <- list(); durations <- list(); totaltime <- list();  effectsize <- list()
for (e in 1:length(events)){
onsets[[e]] <- as.numeric(unlist(event.file %>% subset(event == events[e]) %>% select(onset)))/1000
durations[[e]] <- as.numeric(unlist(event.file %>% subset(event == events[e]) %>% select(duration)))/1000
totaltime[[e]] <- closest_divider(round((nrow(df) * stimulus.duration + sum(df$iti))/1000),TR)
effectsize[[e]] <- 1
}
design = specifydesign(onsets=onsets, durations=durations, totaltime=totaltime[[1]], TR=TR, effectsize=effectsize, conv="double-gamma", cond.names = events)
des.mat = cbind(rep(1, nrow(design)), design)
contrast1 <- c(0,1,-0.33,-0.33,-0.33)
contrast2 <- c(0,-0.33,1,-0.33,-0.33)
contrast3 <- c(0,-0.33,-0.33,1,-0.33)
contrast4 <- c(0,-0.33,-0.33,-0.33,1)
# efficiency = 4/((t(contrast1)%*%solve(t(des.mat)%*%des.mat)%*%contrast1) +
#                 (t(contrast2)%*%solve(t(des.mat)%*%des.mat)%*%contrast2) +
#                 (t(contrast3)%*%solve(t(des.mat)%*%des.mat)%*%contrast3) +
#                 (t(contrast4)%*%solve(t(des.mat)%*%des.mat)%*%contrast4))
## Variance Inflation Factor (rule of thumb - should be below 5)
VIF = diag(solve(cor(des.mat[,2:5])))
# compute pair-wise correlations
pairs_categories = as.data.frame(t(combn(categories,2)))
all_corrs = c()
for (p in 1:nrow(pairs_categories)){
all_corrs[p] <- as.numeric(cor.test(des.mat[,pairs_categories$V1[p]], des.mat[,pairs_categories$V2[p]])$estimate)
}
all_correlations <- all_corrs
mean_corr <- mean(all_corrs)
# add TR to event file
event.file = event.file %>% mutate(TR = onset/1000/TR)
results = list(des.mat, event.file, VIF, all_correlations, mean_corr)
names(results) = c("design_matrix", "event_file", "VIF", "all_correlations", "mean_correlation")
return(results)
}
curr_design <- test_localizer_design(df=localizer,
stimulus.duration=stimulus.duration,
iti.duration=iti.duration,
timing.baseline.block=timing.baseline.block,
event.column="task",
TR=1.5)
curr_design$mean_correlation
curr_design$efficiency
curr_design$VIF
events = unique(unlist(localizer["task"]))
dev.new(width=15, height=5, unit="in")
plot(curr_design$design_matrix[,events[1]], type = 'l', lwd = 2, col = 'red', xlab = "TR",
ylab = '', ylim = c(min(c(curr_design$design_matrix[,events])), 1.3))
lines(curr_design$design_matrix[,events[2]], lwd = 2, col = 'green')
lines(curr_design$design_matrix[,events[3]], lwd = 2, col = 'blue')
lines(curr_design$design_matrix[,events[4]], lwd = 2, col = 'grey')
abline(v=curr_design$event_file[curr_design$event_file$event==events[1],"TR"], lwd = 0.2, col = 'red', lty=1)
abline(v=curr_design$event_file[curr_design$event_file$event==events[2],"TR"], lwd = 0.2, col = 'green', lty=1)
abline(v=curr_design$event_file[curr_design$event_file$event==events[3],"TR"], lwd = 0.2, col = 'blue', lty=1)
abline(v=curr_design$event_file[curr_design$event_file$event==events[4],"TR"], lwd = 0.2, col = 'grey', lty=1)
events
df=localizer
localizer <- read.csv("../Task_sequences/Localizer/localizer_1.csv") %>% subset(practice==0)
categories = c("outdoor_scenes", "objects", "faces", "body_parts")
stimulus.duration = 400;
iti.duration = 300;
n.stims.per.block = 20;
timing.baseline.block = n.stims.per.block * (stimulus.duration+iti.duration) # 14 secs
n.reps.per.category = 3;
total.exp.time = length(categories)*2*timing.baseline.block*n.reps.per.category/60000
n.stims.per.cat = n.stims.per.block*n.reps.per.category;
odd.ball.percent = 0.1
event.column = "task"
TR = 1.5
curr_design <- test_localizer_design(df=localizer,
stimulus.duration=stimulus.duration,
iti.duration=iti.duration,
timing.baseline.block=timing.baseline.block,
event.column="task",
TR=1.5)
curr_design$mean_correlation
events = unique(unlist(localizer["task"]))
dev.new(width=15, height=5, unit="in")
plot(curr_design$design_matrix[,events[1]], type = 'l', lwd = 2, col = 'red', xlab = "TR",
ylab = '', ylim = c(min(c(curr_design$design_matrix[,events])), 1.3))
lines(curr_design$design_matrix[,events[2]], lwd = 2, col = 'green')
lines(curr_design$design_matrix[,events[3]], lwd = 2, col = 'blue')
lines(curr_design$design_matrix[,events[4]], lwd = 2, col = 'grey')
abline(v=curr_design$event_file[curr_design$event_file$event==events[1],"TR"], lwd = 0.2, col = 'red', lty=1)
abline(v=curr_design$event_file[curr_design$event_file$event==events[2],"TR"], lwd = 0.2, col = 'green', lty=1)
abline(v=curr_design$event_file[curr_design$event_file$event==events[3],"TR"], lwd = 0.2, col = 'blue', lty=1)
abline(v=curr_design$event_file[curr_design$event_file$event==events[4],"TR"], lwd = 0.2, col = 'grey', lty=1)
12*6
# add practice trials
prac_outcome_learning = practice_stims %>% subset(phase == "Outcome_learning")
outcome_learning_practice <- data.frame(
PID = NaN,
practice = rep(1, 4),
run= 0,
trial = 1:4,
item_id = c("prac1", "prac2", "prac2", "prac1"),
stimulus = NaN,
path = c(prac_outcome_learning$path[1],prac_outcome_learning$path[2], prac_outcome_learning$path[2], prac_outcome_learning$path[1]),
outcome = c("gain", "no-gain", "no-gain", "gain"),
iti = c(1500, 1000, 2000, 1000),
isi = c(1000, 1500, 1000, 2000),
response = NaN,
response_acc = NaN,
response_rt = NaN
)
items <- LETTERS[1:n_deliberation_pairs]
outcomes <- data.frame(PID = NaN, practice=0, trial=NaN, item_id=items, stimulus=NaN, path=NaN, outcome=NaN)
outcomes
i=1
outcome_learning_trials = c()
for (j in 1:n_outcome_learning_rep){
outcome_learning_trials <- rbind(outcome_learning_trials,
outcomes %>%
mutate(iti = sample(timing_outcome_learning_iti[rep(1:nrow(timing_outcome_learning_iti), timing_outcome_learning_iti$reps),"sec"]),
isi = sample(timing_outcome_learning_isi[rep(1:nrow(timing_outcome_learning_isi), timing_outcome_learning_isi$reps),"sec"]),
block = j,
response = NaN,
response_acc = NaN,
response_rt = NaN))}
# shuffle order
outcome_learning_trials <- outcome_learning_trials %>%
slice(sample(1:n())) %>%
mutate(trial=NaN)
# add practice trials
outcome_learning_trials <- outcome_learning_trials %>% mutate(run = rep(1:n_outcome_learning_runs,each=nrow(outcome_learning_trials)/2))
outcome_learning_trials <- rbind(outcome_learning_practice,outcome_learning_trials) %>%
mutate(trial = 1:n())
# add practice trials
prac_outcome_learning = practice_stims %>% subset(phase == "Outcome_learning")
outcome_learning_practice <- data.frame(
PID = NaN,
practice = rep(1, 4),
run= 0,
block=0,
trial = 1:4,
item_id = c("prac1", "prac2", "prac2", "prac1"),
stimulus = NaN,
path = c(prac_outcome_learning$path[1],prac_outcome_learning$path[2], prac_outcome_learning$path[2], prac_outcome_learning$path[1]),
outcome = c("gain", "no-gain", "no-gain", "gain"),
iti = c(1500, 1000, 2000, 1000),
isi = c(1000, 1500, 1000, 2000),
response = NaN,
response_acc = NaN,
response_rt = NaN
)
# add practice trials
prac_outcome_learning = practice_stims %>% subset(phase == "Outcome_learning")
outcome_learning_practice <- data.frame(
PID = NaN,
practice = rep(1, 4),
run= 0,
block=0,
trial = 1:4,
item_id = c("prac1", "prac2", "prac2", "prac1"),
stimulus = NaN,
path = c(prac_outcome_learning$path[1],prac_outcome_learning$path[2], prac_outcome_learning$path[2], prac_outcome_learning$path[1]),
outcome = c("gain", "no-gain", "no-gain", "gain"),
iti = c(1500, 1000, 4000, 2000),
isi = c(1000, 1500, 1000, 2000),
response = NaN,
response_acc = NaN,
response_rt = NaN
)
# assign item place holder
items <- LETTERS[1:n_deliberation_pairs]
outcomes <- data.frame(PID = NaN, practice=0, trial=NaN, item_id=items, stimulus=NaN, path=NaN, outcome=NaN)
outcome_learning_trials = c()
for (j in 1:n_outcome_learning_rep){
outcome_learning_trials <- rbind(outcome_learning_trials,
outcomes %>%
mutate(iti = sample(timing_outcome_learning_iti[rep(1:nrow(timing_outcome_learning_iti), timing_outcome_learning_iti$reps),"sec"]),
isi = sample(timing_outcome_learning_isi[rep(1:nrow(timing_outcome_learning_isi), timing_outcome_learning_isi$reps),"sec"]),
block = j,
response = NaN,
response_acc = NaN,
response_rt = NaN))
}
# shuffle order
outcome_learning_trials <- outcome_learning_trials %>%
slice(sample(1:n())) %>%
mutate(trial=NaN)
# add practice trials
outcome_learning_trials <- outcome_learning_trials %>% mutate(run = rep(1:n_outcome_learning_runs,each=nrow(outcome_learning_trials)/2))
outcome_learning_trials <- rbind(outcome_learning_practice,outcome_learning_trials) %>%
mutate(trial = 1:n())
View(outcome_learning_trials)
outcome_learning_trials = c()
for (j in 1:n_outcome_learning_rep){
curr_rep <- outcomes %>%
mutate(item_id = item_id,
block = j) %>%
slice(sample(1:n())) # shuffle
outcome_learning_trials <- rbind(outcome_learning_trials, curr_rep)
}
outcome_learning_trials = c()
for (j in 1:n_outcome_learning_rep){
curr_rep <- outcomes %>%
mutate(item_id = item_id,
block = j) %>%
sample(1:n()) # shuffle
outcome_learning_trials <- rbind(outcome_learning_trials, curr_rep)
}
# assign item place holder
items <- LETTERS[1:n_deliberation_pairs]
outcomes <- data.frame(PID = NaN, practice=0, run=NaN, block=NaN, trial=NaN, item_id=NaN, stimulus=NaN, path=NaN, outcome=NaN, iti=NaN, isi=NaN, response = NaN, response_acc = NaN, response_rt = NaN)
outcome_learning_trials = c()
for (j in 1:n_outcome_learning_rep){
curr_rep <- outcomes %>%
mutate(item_id = item_id,
block = j) %>%
slice(sample(1:n())) # shuffle
outcome_learning_trials <- rbind(outcome_learning_trials, curr_rep)
}
j=1
curr_rep <- outcomes %>%
mutate(item_id = item_id,
block = j)
curr_rep
outcome_learning_trials = c()
for (j in 1:n_outcome_learning_rep){
curr_rep <- outcomes %>%
mutate(item_id = items,
block = j) %>%
slice(sample(1:n())) # shuffle
outcome_learning_trials <- rbind(outcome_learning_trials, curr_rep)
}
j
curr_rep
curr_rep <- outcomes %>%
mutate(item_id = items,
block = j) %>%
slice(sample(1:n()))
items
outcomes <- data.frame(PID = NaN, practice=0, run=NaN, block=NaN, trial=NaN, item_id=items, stimulus=NaN, path=NaN, outcome=NaN, iti=NaN, isi=NaN, response = NaN, response_acc = NaN, response_rt = NaN)
outcome_learning_trials = c()
for (j in 1:n_outcome_learning_rep){
curr_rep <- outcomes %>%
mutate(block = j) %>%
slice(sample(1:n())) # shuffle
outcome_learning_trials <- rbind(outcome_learning_trials, curr_rep)
}
curr_rep <- outcomes %>%
mutate(block = j)
curr_rep
library(dplyr)
library(tidyr)
library(truncnorm)
curr_rep <- outcomes %>%
mutate(block = j) %>%
slice(sample(1:n()))
outcomes %>%
mutate(block = j) %>%
slice(sample(1:n()))
curr_rep <- outcomes %>%
mutate(block = j) %>%
dplyr::slice(sample(1:n()))
outcome_learning_trials = c()
for (j in 1:n_outcome_learning_rep){
curr_rep <- outcomes %>%
mutate(block = j) %>%
dplyr::slice(sample(1:n())) # shuffle
outcome_learning_trials <- rbind(outcome_learning_trials, curr_rep)
}
outcome_learning_trials
outcome_learning_trials <- outcome_learning_trials %>% mutate(run = rep(1:n_outcome_learning_runs,each=nrow(outcome_learning_trials)/2))
outcome_learning_trials <- rbind(outcome_learning_practice,outcome_learning_trials) %>%
mutate(trial = 1:n())
outcome_learning_trials <- outcome_learning_trials %>% dplyr::mutate(run = rep(1:n_outcome_learning_runs,each=nrow(outcome_learning_trials)/2))
outcome_learning_trials <- rbind(outcome_learning_practice,outcome_learning_trials) %>%
dplyr::mutate(trial = 1:n())
outcome_learning_trials
# add practice trials
prac_outcome_learning = practice_stims %>% subset(phase == "Outcome_learning")
outcome_learning_practice <- data.frame(
PID = NaN,
practice = rep(1, 4),
run= 0,
block=0,
trial = 1:4,
item_id = c("prac1", "prac2", "prac2", "prac1"),
stimulus = NaN,
path = c(prac_outcome_learning$path[1],prac_outcome_learning$path[2], prac_outcome_learning$path[2], prac_outcome_learning$path[1]),
outcome = c("gain", "no-gain", "no-gain", "gain"),
iti = c(1500, 1000, 4000, 2000),
isi = c(1000, 1500, 1000, 2000),
response = NaN,
response_acc = NaN,
response_rt = NaN
)
# assign item place holder
items <- LETTERS[1:n_deliberation_pairs]
outcomes <- data.frame(PID = NaN, practice=0, run=NaN, block=NaN, trial=NaN, item_id=items, stimulus=NaN, path=NaN, outcome=NaN, iti=NaN, isi=NaN, response = NaN, response_acc = NaN, response_rt = NaN)
for (i in 1:n_scanned_designs){
outcome_learning_trials = c()
for (j in 1:n_outcome_learning_rep){
curr_rep <- outcomes %>%
mutate(block = j) %>%
dplyr::slice(sample(1:n())) # shuffle
outcome_learning_trials <- rbind(outcome_learning_trials, curr_rep)
}
# add practice trials
outcome_learning_trials <- outcome_learning_trials %>% dplyr::mutate(run = rep(1:n_outcome_learning_runs,each=nrow(outcome_learning_trials)/2))
outcome_learning_trials <- rbind(outcome_learning_practice,outcome_learning_trials) %>%
dplyr::mutate(trial = 1:n())
# save the current design
write.csv(outcome_learning_trials, sprintf("../Task_sequences/Outcome_learning/outcome_learning_%d.csv",i), row.names = FALSE)
}
n_scanned_designs =
1
# add practice trials
prac_outcome_learning = practice_stims %>% subset(phase == "Outcome_learning")
outcome_learning_practice <- data.frame(
PID = NaN,
practice = rep(1, 4),
run= 0,
block=0,
trial = 1:4,
item_id = c("prac1", "prac2", "prac2", "prac1"),
stimulus = NaN,
path = c(prac_outcome_learning$path[1],prac_outcome_learning$path[2], prac_outcome_learning$path[2], prac_outcome_learning$path[1]),
outcome = c("gain", "no-gain", "no-gain", "gain"),
iti = c(1500, 1000, 4000, 2000),
isi = c(1000, 1500, 1000, 2000),
response = NaN,
response_acc = NaN,
response_rt = NaN
)
# assign item place holder
items <- LETTERS[1:n_deliberation_pairs]
outcomes <- data.frame(PID = NaN, practice=0, run=NaN, block=NaN, trial=NaN, item_id=items, stimulus=NaN, path=NaN, outcome=NaN, iti=NaN, isi=NaN, response = NaN, response_acc = NaN, response_rt = NaN)
for (i in 1:n_scanned_designs){
outcome_learning_trials = c()
for (j in 1:n_outcome_learning_rep){
curr_rep <- outcomes %>%
mutate(block = j) %>%
dplyr::slice(sample(1:n())) # shuffle
outcome_learning_trials <- rbind(outcome_learning_trials, curr_rep)
}
# add practice trials
outcome_learning_trials <- outcome_learning_trials %>% dplyr::mutate(run = rep(1:n_outcome_learning_runs,each=nrow(outcome_learning_trials)/2))
outcome_learning_trials <- rbind(outcome_learning_practice,outcome_learning_trials) %>%
dplyr::mutate(trial = 1:n())
# save the current design
write.csv(outcome_learning_trials, sprintf("../Task_sequences/Outcome_learning/outcome_learning_%d.csv",i), row.names = FALSE)
}
