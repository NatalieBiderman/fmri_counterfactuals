}
# Save raw data
if (save_raw_data==1){
write.csv(exp_data, file = sprintf("%s/Raw_data/raw_%s",preprocessed_data_folder,file_name))
}
# Choose specific columns
df <- exp_data[exp_data$ttype == main_trial,columns]
# save
write.csv(df, file = sprintf("%s/df_%s",preprocessed_data_folder, file_name))
return(df)
}
df_ratings <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "ratings.csv",
columns = c("PID", "time_elapsed","index", "stimulus_id", "painting", "response","rt"),
main_trial = "rating",
save_raw_data = 1)
df_deliberation <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "deliberation.csv",
columns = c("PID","time_elapsed","index","block","reward_type","stimulus_left","stimulus_right","rating_left","rating_right","painting_left","painting_right","left_chosen","chosen_obj","unchosen_obj","explain_trial","explain_response"),
main_trial = "deliberation",
save_raw_data = 0)
View(df_deliberation)
df_ratings$rt
as.numeric(df_ratings$rt)
df_deliberation$rating_left
df_deliberation$stimulus_left
df_deliberation$left_chosen
df_deliberation$explain_trial
df_reward_learning <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "reward_learning.csv",
columns = c("PID","time_elapsed","index","block","stimulus_id","reward_type","reward_amount","see_reward_rt"),
main_trial = "see_reward",
save_raw_data = 0)
df_final_decisions <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "final_decisions.csv",
columns = c("PID","time_elapsed","index","block","rt","chosen_trial","gain_left","left_chosen","higher_outcome_chosen","chosen_obj","unchosen_obj","stimulus_left","stimulus_right","rating_left","rating_right","painting_left","painting_right","stimulus_left_deliberation_ind","stimulus_right_deliberation_ind"),
main_trial = "final_decisions",
save_raw_data = 0)
df_memory <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "memory.csv",
columns = c("PID","time_elapsed","index","stimulus_left","stimulus_right","old_pair","old_response","rt_pairs","chosen_object","left_object_chosen","rt_object"),
main_trial = "memory_pairs",
save_raw_data = 0)
df_outcome_evaluation <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "outcome_evaluation.csv",
columns = c("PID","time_elapsed","index","stimulus_id","reward_type","chosen_obj","initial_rating","outcome_eval_response","outcome_eval_rt","outcome_eval_gain","outcome_eval_acc","outcome_eval_confidence","outcome_eval_confidence_rt"),
main_trial = "outcome_evaluation",
save_raw_data = 0)
df_final_ratings <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "final_ratings.csv",
columns = c("PID", "time_elapsed","index", "stimulus_id", "painting","deliberated_stim", "reward_type","chosen_obj","initial_rating","new_rating","rt"),
main_trial = "final_rating",
save_raw_data = 0)
preprocessed_data_folder
create_csv_from_js_data <- function(individual_data_folder, preprocessed_data_folder, file_name, columns, main_trial, save_raw_data){
# If packages are not installed, install. Then, load libraries.
list_of_packages <- c("dplyr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
# Load data and concatenate into a single data frame
#exp_data <- read.csv(sprintf("%s/%s",individual_data_folder,data_files[1]), stringsAsFactors = FALSE)
# for (i in 2:length(data_files)){
#   curr_data <- read.csv(sprintf("%s/%s",individual_data_folder,data_files[i]), stringsAsFactors = FALSE)
#   if (!setequal(colnames(curr_data), colnames(exp_data))){
#     print(paste0("error detected for",data_files[i]))
#     curr_data[setdiff(names(exp_data), names(curr_data))] <- NA
#   }
#   exp_data <- rbind(exp_data, curr_data)
# }
data_files <- list.files(individual_data_folder,pattern="*.csv")
# exp_data <- do.call(rbind, lapply(data_files,function(x) read.csv(sprintf("%s/%s",individual_data_folder,x), stringsAsFactors = FALSE)))
exp_data <- c()
for (i in 1:length(data_files)){
curr_data <- read.csv(sprintf("%s%s",individual_data_folder,data_files[i]), stringsAsFactors = FALSE)
exp_data <- rbind(exp_data, curr_data)
}
# turn rt columns to number
exp_data$rt <- as.numeric(exp_data$rt)/1000
exp_data$rt_pairs <- as.numeric(exp_data$rt_pairs)/1000
exp_data$rt_object <- as.numeric(exp_data$rt_object)/1000
exp_data$see_reward_rt <- as.numeric(exp_data$see_reward_rt)/1000
exp_data$register_reward_rt <- as.numeric(exp_data$register_reward_rt)/1000
exp_data$outcome_eval_rt <- as.numeric(exp_data$outcome_eval_rt)/1000
exp_data$outcome_eval_confidence_rt <- as.numeric(exp_data$outcome_eval_confidence_rt)/1000
# Save raw data
if (save_raw_data==1){
write.csv(exp_data, file = sprintf("%s/Raw_data/raw_data",preprocessed_data_folder))
}
# Choose specific columns
df <- exp_data[exp_data$ttype == main_trial,columns]
# save
write.csv(df, file = sprintf("%s/df_%s",preprocessed_data_folder, file_name))
return(df)
}
df_ratings <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "ratings.csv",
columns = ratings_columns,
main_trial = "rating",
save_raw_data = 1)
ratings_columns = c("PID", "time_elapsed","index", "stimulus_id", "painting", "response","rt");
deliberation_columns = c("PID","time_elapsed","index","block","reward_type","stimulus_left","stimulus_right","rating_left","rating_right","painting_left","painting_right","left_chosen","chosen_obj","unchosen_obj","explain_trial","explain_response");
reward_learning_columns = c("PID","time_elapsed","index","block","stimulus_id","reward_type","reward_amount","see_reward_rt");
final_decisions_columns = c("PID","time_elapsed","index","block","rt","chosen_trial","gain_left","left_chosen","higher_outcome_chosen","chosen_obj","unchosen_obj","stimulus_left","stimulus_right","rating_left","rating_right","painting_left","painting_right","stimulus_left_deliberation_ind","stimulus_right_deliberation_ind");
memory_columns = c("PID","time_elapsed","index","stimulus_left","stimulus_right","old_pair","old_response","rt_pairs","chosen_object","left_object_chosen","rt_object");
outcome_eval_columns = c("PID","time_elapsed","index","stimulus_id","reward_type","chosen_obj","initial_rating","outcome_eval_response","outcome_eval_rt","outcome_eval_gain","outcome_eval_acc","outcome_eval_confidence","outcome_eval_confidence_rt");
final_ratings_columns = c("PID", "time_elapsed","index", "stimulus_id", "painting","deliberated_stim", "reward_type","chosen_obj","initial_rating","new_rating","rt");
df_ratings <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "ratings.csv",
columns = ratings_columns,
main_trial = "rating",
save_raw_data = 1)
View(df_ratings)
create_csv_from_js_data <- function(individual_data_folder, preprocessed_data_folder, file_name, columns, main_trial, save_raw_data){
# If packages are not installed, install. Then, load libraries.
list_of_packages <- c("dplyr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
# Load data and concatenate into a single data frame
#exp_data <- read.csv(sprintf("%s/%s",individual_data_folder,data_files[1]), stringsAsFactors = FALSE)
# for (i in 2:length(data_files)){
#   curr_data <- read.csv(sprintf("%s/%s",individual_data_folder,data_files[i]), stringsAsFactors = FALSE)
#   if (!setequal(colnames(curr_data), colnames(exp_data))){
#     print(paste0("error detected for",data_files[i]))
#     curr_data[setdiff(names(exp_data), names(curr_data))] <- NA
#   }
#   exp_data <- rbind(exp_data, curr_data)
# }
data_files <- list.files(individual_data_folder,pattern="*.csv")
# exp_data <- do.call(rbind, lapply(data_files,function(x) read.csv(sprintf("%s/%s",individual_data_folder,x), stringsAsFactors = FALSE)))
exp_data <- c()
for (i in 1:length(data_files)){
curr_data <- read.csv(sprintf("%s%s",individual_data_folder,data_files[i]), stringsAsFactors = FALSE)
exp_data <- rbind(exp_data, curr_data)
}
# turn rt columns to number
exp_data$rt <- as.numeric(exp_data$rt)/1000
exp_data$rt_pairs <- as.numeric(exp_data$rt_pairs)/1000
exp_data$rt_object <- as.numeric(exp_data$rt_object)/1000
exp_data$see_reward_rt <- as.numeric(exp_data$see_reward_rt)/1000
exp_data$register_reward_rt <- as.numeric(exp_data$register_reward_rt)/1000
exp_data$outcome_eval_rt <- as.numeric(exp_data$outcome_eval_rt)/1000
exp_data$outcome_eval_confidence_rt <- as.numeric(exp_data$outcome_eval_confidence_rt)/1000
# Save raw data
if (save_raw_data==1){
write.csv(exp_data, file = sprintf("%s/Raw_data/raw_data.csv",preprocessed_data_folder))
}
# Choose specific columns
df <- exp_data[exp_data$ttype == main_trial,columns]
# save
write.csv(df, file = sprintf("%s/df_%s",preprocessed_data_folder, file_name))
return(df)
}
df_ratings <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "ratings.csv",
columns = ratings_columns,
main_trial = "rating",
save_raw_data = 1)
all_data <- read.csv(sprintf("%s/raw_data.csv",preprocessed_data_folder))
all_data <- read.csv(sprintf("%s/Raw_data/raw_data.csv",preprocessed_data_folder))
all_data
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index")
df_deliberation_explain
df_deliberation <- df_deliberation %>%
merge(df_deliberation_explain, by=c("PID","index"))
View(df_deliberation)
deliberation_columns = c("PID","time_elapsed","index","block","reward_type","stimulus_left","stimulus_right","rating_left","rating_right","painting_left","painting_right","left_chosen","chosen_obj","unchosen_obj","explain_trial");
df_deliberation <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "deliberation.csv",
columns = deliberation_columns,
main_trial = "deliberation",
save_raw_data = 0)
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index")
df_deliberation <- df_deliberation %>%
merge(df_deliberation_explain, by=c("PID","index"))
View(df_deliberation_explain)
View(df_deliberation)
df_deliberation_explain
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index") %>%
rename(explain_rt = rt)
df_deliberation <- df_deliberation %>%
merge(df_deliberation_explain, by=c("PID","index"))
View(df_deliberation)
deliberation_columns = c("PID","time_elapsed","index","block","reward_type","stimulus_left","stimulus_right","rating_left","rating_right","painting_left","painting_right","left_chosen","chosen_obj","unchosen_obj","explain_trial");
df_deliberation <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "deliberation.csv",
columns = deliberation_columns,
main_trial = "deliberation",
save_raw_data = 0)
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index") %>%
rename(explain_rt = rt)
df_deliberation <- df_deliberation %>%
merge(df_deliberation_explain, by=c("PID","index"))
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index") %>%
rename(explain_rt = rt) %>%
mutate(explain_response = gsub("[[:space:]]", "",str_remove(gsub("[[:punct:]]", "", explain_response),"Q0"))
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index") %>%
rename(explain_rt = rt) %>%
mutate(explain_response = gsub("[[:space:]]", "",str_remove(gsub("[[:punct:]]", "", explain_response),"Q0")))
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index") %>%
rename(explain_rt = rt) %>%
mutate(explain_response = gsub("[[:space:]]", "",str_remove(gsub("[[:punct:]]", "", explain_response),"Q0")))
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index") %>%
rename(explain_rt = rt) %>%
mutate(explain_response = gsub("",str_remove(gsub("[[:punct:]]", "", explain_response),"Q0")))
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index") %>%
rename(explain_rt = rt) %>%
mutate(explain_response = gsub("",str_remove(gsub("[[:punct:]]", "", explain_response),"Q0")))
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index") %>%
rename(explain_rt = rt) %>%
mutate(explain_response = gsub(str_remove(gsub("[[:punct:]]", "", explain_response),"Q0")))
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index") %>%
rename(explain_rt = rt) %>%
mutate(explain_response = gsub(str_remove(gsub("[[:punct:]]", "", explain_response),"Q0")))
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index") %>%
rename(explain_rt = rt) %>%
mutate(explain_response = str_remove(gsub("[[:punct:]]", "", explain_response),"Q0"))
df_deliberation_explain <- all_data %>%
subset(ttype == "explain_trial") %>%
dplyr::select("PID", "explain_response", "rt", "index") %>%
rename(explain_rt = rt) %>%
mutate(explain_response = str_remove(gsub("[[:punct:]]", "", explain_response),"Q0"))
df_deliberation <- df_deliberation %>%
merge(df_deliberation_explain, by=c("PID","index"))
View(df_deliberation)
View(df_reward_learning)
View(df_final_decisions)
df_reward_registration <- all_data %>%
subset(ttype == "reward_outcome") %>%
dplyr::select("PID", "index","register_reward_response", "register_reward_rt")
df_reward_learning <- df_reward_learning %>%
merge(df_reward_registration, by=c("PID","index"))
df_reward_registration <- all_data %>%
subset(ttype == "reward_outcome") %>%
dplyr::select("PID", "index","register_reward_response", "register_reward_rt")
df_reward_learning <- df_reward_learning %>%
merge(df_reward_registration, by=c("PID","index")) %>%
mutate(register_reward_acc = ifelse(register_reward_response == reward_type, 1, 0))
df_reward_learning <- df_reward_learning %>%
merge(df_reward_registration, by=c("PID","index"))
df_reward_learning <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "reward_learning.csv",
columns = reward_learning_columns,
main_trial = "see_reward",
save_raw_data = 0)
df_reward_registration <- all_data %>%
subset(ttype == "reward_outcome") %>%
dplyr::select("PID", "index","register_reward_response", "register_reward_rt")
df_reward_learning <- df_reward_learning %>%
merge(df_reward_registration, by=c("PID","index")) %>%
mutate(register_reward_acc = ifelse(register_reward_response == reward_type, 1, 0))
View(df_memory)
df_object_memory <- all_data %>%
subest(ttype == "memory_chosen_object") %>%
dplyr::select("PID", "index","left_object_chosen", "rt_object")
df_object_memory <- all_data %>%
subset(ttype == "memory_chosen_object") %>%
dplyr::select("PID", "index","left_object_chosen", "rt_object")
df_memory <- df_memory %>%
merge(df_object_memory, by=c("PID","index"))
View(df_memory)
memory_columns = c("PID","time_elapsed","index","stimulus_left","stimulus_right","old_pair","old_response","rt_pairs","chosen_object");
df_memory <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "memory.csv",
columns = memory_columns,
main_trial = "memory_pairs",
save_raw_data = 0)
df_memory <- df_memory %>%
merge(df_object_memory, by=c("PID","index")) %>%
mutate(chosen_object_response = ifelse(left_object_chosen == 1, stimulus_left, stimulus_right),
object_choice_acc = ifelse(old_pair == 0, NaN, ifelse(chosen_object_response == chosen_object, 1, 0)))
df_memory <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "memory.csv",
columns = memory_columns,
main_trial = "memory_pairs",
save_raw_data = 0)
df_memory <- df_memory %>%
merge(df_object_memory, by=c("PID","index")) %>%
mutate(chosen_object_response = ifelse(left_object_chosen == 1, stimulus_left, stimulus_right),
object_choice_acc = ifelse(old_pair == 0, NaN, ifelse(chosen_object_response == chosen_object, 1, 0))) %>%
dplyr::select(-left_object_chosen)
outcome_eval_columns = c("PID","time_elapsed","index","stimulus_id","reward_type","chosen_obj","initial_rating","outcome_eval_response","outcome_eval_rt","outcome_eval_gain","outcome_eval_acc");
df_outcome_evaluation <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "outcome_evaluation.csv",
columns = outcome_eval_columns,
main_trial = "outcome_evaluation",
save_raw_data = 0)
df_confidence <- all_data %>%
subset(ttype == "outcome_evaluation_confidence") %>%
dplyr::select("PID", "index", "outcome_eval_confidence",	"outcome_eval_confidence_rt")
df_outcome_evaluation <- df_outcome_evaluation %>%
merge(df_confidence, by=c("PID","index"))
View(df_outcome_evaluation)
View(df_final_ratings)
df_final_ratings <- create_csv_from_js_data(
individual_data_folder,
preprocessed_data_folder,
file_name = "final_ratings.csv",
columns = final_ratings_columns,
main_trial = "final_ratings",
save_raw_data = 0)
raw_debreif <- all_data %>%
subset(grepl("debreif", ttype)) %>%
dplyr::select(c("PID", "ttype", "responses"))
debreif <- raw_debreif %>%
mutate(responses = gsub("[[:space:]]", " ",str_remove(gsub("[[:punct:]]", "", responses),"Q0"))) %>%
mutate(new_ttype = str_remove(as.character(ttype),"debreif_")) %>%
dplyr::select(-ttype) %>%
spread(new_ttype, responses) %>%
dplyr::select(-c("end", "intro"))
View(debreif)
write.csv(df_deliberation, file = sprintf("%s/df_deliberation",preprocessed_data_folder))
write.csv(df_reward_learning, file = sprintf("%s/df_reward_learning",preprocessed_data_folder))
write.csv(df_ratings, file = sprintf("%s/df_ratings",preprocessed_data_folder))
write.csv(df_final_decisions, file = sprintf("%s/df_final_decisions",preprocessed_data_folder))
write.csv(df_memory, file = sprintf("%s/df_memory",preprocessed_data_folder))
write.csv(df_outcome_evaluation, file = sprintf("%s/df_outcome_evaluation",preprocessed_data_folder))
write.csv(df_final_ratings, file = sprintf("%s/df_final_ratings",preprocessed_data_folder))
write.csv(debreif, file = sprintf("%s/df_debreif.csv",preprocessed_data_folder))
write.csv(df_deliberation, file = sprintf("%s/df_deliberation.csv",preprocessed_data_folder))
write.csv(df_reward_learning, file = sprintf("%s/df_reward_learning.csv",preprocessed_data_folder))
write.csv(df_ratings, file = sprintf("%s/df_ratings.csv",preprocessed_data_folder))
write.csv(df_final_decisions, file = sprintf("%s/df_final_decisions.csv",preprocessed_data_folder))
write.csv(df_memory, file = sprintf("%s/df_memory.csv",preprocessed_data_folder))
write.csv(df_outcome_evaluation, file = sprintf("%s/df_outcome_evaluation.csv",preprocessed_data_folder))
write.csv(df_final_ratings, file = sprintf("%s/df_final_ratings.csv",preprocessed_data_folder))
write.csv(debreif, file = sprintf("%s/df_debreif.csv",preprocessed_data_folder))
# save all data files
write.csv(df_deliberation, file = sprintf("%s/df_deliberation.csv",preprocessed_data_folder))
write.csv(df_reward_learning, file = sprintf("%s/df_reward_learning.csv",preprocessed_data_folder))
write.csv(df_ratings, file = sprintf("%s/df_ratings.csv",preprocessed_data_folder))
write.csv(df_final_decisions, file = sprintf("%s/df_final_decisions.csv",preprocessed_data_folder))
write.csv(df_memory, file = sprintf("%s/df_memory.csv",preprocessed_data_folder))
write.csv(df_outcome_evaluation, file = sprintf("%s/df_outcome_evaluation.csv",preprocessed_data_folder))
write.csv(df_final_ratings, file = sprintf("%s/df_final_ratings.csv",preprocessed_data_folder))
write.csv(debreif, file = sprintf("%s/df_debreif.csv",preprocessed_data_folder))
int_data <- create_interactive_csv_from_js_data(
int_data_folder = sprintf("%s/Interactive_data/",raw_data_path),
exp_data_folder = sprintf("%s/Individual_data/",raw_data_path),
ttype_name = "ttype")
create_interactive_csv_from_js_data <- function(int_data_folder, exp_data_folder, ttype_name){
# If packages are not installed, install. Then, load libraries.
list_of_packages <- c("dplyr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
# Load data and concatenate into a single data frame
int_data_files <- list.files(sprintf("%s/",int_data_folder),pattern="*.csv")
#int_data <- do.call(rbind, lapply(int_data_files,function(x) read.csv(sprintf("%s/%s",int_data_folder,x), stringsAsFactors = FALSE)))
int_data <- do.call(rbind, lapply(int_data_files,function(x) tryCatch(read.csv(sprintf("%s/%s",int_data_folder,x), stringsAsFactors = FALSE),error=function(e) NULL)))
# add task type
int_data[ttype_name] <- NaN
# use raw data to find the ttype during events
exp_data_files <- list.files(sprintf("%s/",exp_data_folder),pattern="*.csv")
exp_data <- do.call(rbind, lapply(exp_data_files,function(x) read.csv(sprintf("%s/%s",exp_data_folder,x), stringsAsFactors = FALSE)))
for (i in 1:nrow(int_data)){
# find index
logical_vector = exp_data$PID == int_data$PID[i] & exp_data$trial_index == int_data$trial[i];
if (any(logical_vector)){
int_data[i,ttype_name] = exp_data[exp_data$PID == int_data$PID[i] & exp_data$trial_index == int_data$trial[i],ttype_name]
}
}
return(int_data)
}
int_data <- create_interactive_csv_from_js_data(
int_data_folder = sprintf("%s/Interactive_data/",raw_data_path),
exp_data_folder = sprintf("%s/Individual_data/",raw_data_path),
ttype_name = "ttype")
View(int_data)
rm(list=ls(all=TRUE))
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# If packages are not installed, install. Then, load libraries.
list_of_packages <- c("ggplot2", "Rmisc", "cowplot", "reshape2", "gridExtra", "arm", "mosaic", "stringr", "tidyr", "dplyr", "bayesplot", "rstanarm", "latex2exp", "kableExtra", "tibble")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
# Load functions
source("Tools/create_csv_from_js_data.R")
source("Tools/create_interactive_csv_from_js_data.R")
source("Tools/create_event_log.R")
source("Tools/preprocess_js_data.R")
rm(list=ls(all=TRUE))
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# If packages are not installed, install. Then, load libraries.
list_of_packages <- c("ggplot2", "Rmisc", "cowplot", "reshape2", "gridExtra", "arm", "mosaic", "stringr", "tidyr", "dplyr", "bayesplot", "rstanarm", "latex2exp", "kableExtra", "tibble")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
# Load functions
source("Tools/create_csv_from_js_data.R")
source("Tools/create_interactive_csv_from_js_data.R")
source("Tools/create_event_log.R")
source("Tools/preprocess_js_data.R")
# Load functions
source("Tools/create_csv_from_js_data.R")
source("Tools/create_interactive_csv_from_js_data.R")
source("Tools/create_event_log.R")
source("Tools/preprocess_js_data_counterfactuals.R")
source("Tools/plotting.R")
# Figure parameters
fig_size = c(10,10)
fig_type = "svg"  # "eps" # or png
n_sem <- 1
Save_plots <- 1
point_size <- 4.5
point_stroke <- 0.6
line_size <- 1
color_pallete <- "Dark2"
# Bayesian model params
options(mc.cores = parallel::detectCores())
params <- list()
params$iterations <- 4000
params$chains <- 4
params$warmup <- 2000
params$adapt_delta <- 0.99
# Do you want to run the models or load them?
run_models = 0;
# Do you want to preprocess data or load it?
preprocess_data = 1;
processed_all_data_path = "Data/All_data";
processed_clean_data_path = "Data/Clean_data";
preprocessed_data_folder = processed_all_data_path;
raw_data_path = "../Piloting/single_category/Data"
individual_data_folder = sprintf("%s/Individual_data/",raw_data_path)
if (preprocess_data == 1){
preprocess_js_data_counterfactuals(raw_data_path=raw_data_path,
preprocessed_data_folder = all_data_path)
}
# Load functions
source("Tools/create_csv_from_js_data.R")
source("Tools/create_interactive_csv_from_js_data.R")
source("Tools/create_event_log.R")
source("Tools/preprocess_js_data_counterfactuals.R")
source("Tools/plotting.R")
# Load data
if (preprocess_data == 1){
preprocess_js_data_counterfactuals(raw_data_path=raw_data_path,
preprocessed_data_folder = all_data_path)
}
# Load data
if (preprocess_data == 1){
preprocess_js_data_counterfactuals(raw_data_path,preprocessed_data_folder)
}
df <- list(read.csv(paste0(preprocessed_data_folder,"/df_ratings.csv")),
read.csv(paste0(preprocessed_data_folder,"/df_deliberation.csv")),
read.csv(paste0(preprocessed_data_folder,"/df_reward_learning.csv")),
read.csv(paste0(preprocessed_data_folder,"/df_final_decisions.csv")),
read.csv(paste0(preprocessed_data_folder,"/df_memory.csv")),
read.csv(paste0(preprocessed_data_folder,"/df_outcome_evaluation.csv")),
read.csv(paste0(preprocessed_data_folder,"/df_final_ratings.csv")),
read.csv(paste0(preprocessed_data_folder,"/df_debreif.csv")),
read.csv(paste0(preprocessed_data_folder,"/interaction.csv")),
read.csv(paste0(preprocessed_data_folder,"/Raw_data/raw_data.csv")))
names(df) <- c("ratings", "deliberation", "reward_learning", "final_decisions", "memory", "outcome_evaluation", "final_ratings", "debreif", "interaction_data", "all_data")
View(df)
